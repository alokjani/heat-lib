heat_template_version: 2015-10-15

description: >
  Base template for software config deployment

parameters:

  http_proxy:
    type: string
    description: The http proxy to be used during the package installation
    default: "none"

  https_proxy:
    type: string
    description: The https proxy to be used during the package installation
    default: "none"


  ssl_config_type:
    type: string
    description: The type of SSL configuration for the webserver
    default: "none"
    constraints:
      - allowed_values: ["none", "generated", "provided"]

  ssl_cert:
    type: string
    description: Base 64 encoded cert file
    default: "none"

  ssl_key:
    type: string
    description: Base 64 encoded key file
    default: "none"

  ssl_ca:
    type: string
    description: Base 64 encoded certificate authority file
    default: "none"

  instance:
    type: string
    description: The instance where this Software Configuration should be applied
    constraints:
      - custom_constraint: nova.server

resources:

  install:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: http_proxy
        - name: https_proxy
      outputs:
        - name: status
      config: { get_file: scripts/httpd/install.sh }

  install_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config: { get_resource: install }
      server: { get_param: instance }
      signal_transport: HEAT_SIGNAL
      actions:
        - CREATE
      input_values:
        http_proxy: { get_param: http_proxy }
        https_proxy: { get_param: https_proxy }

  config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
        - name: status
      inputs:
        - name: ssl_config_type
        - name: ssl_cert
        - name: ssl_key
        - name: ssl_ca
      config: { get_file: scripts/httpd/configure.sh }

  config_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: install_deployment
    properties:
      config: { get_resource: config }
      server: { get_param: instance }
      signal_transport: HEAT_SIGNAL
      input_values:
        ssl_config_type: { get_param: ssl_config_type }
        ssl_cert: { get_param: ssl_cert }
        ssl_key: { get_param: ssl_key }
        ssl_ca: { get_param: ssl_ca }

  start:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
        - name: status
      config: { get_file: scripts/httpd/start.sh }

  start_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: config_deployment
    properties:
      config: { get_resource: start }
      server: { get_param: instance }
      signal_transport: HEAT_SIGNAL
      actions:
        - CREATE

outputs:
  install_status:
    value: { get_attr: [install_deployment, status] }

  install_stderr:
    value: { get_attr: [install_deployment, deploy_stderr] }

  config_status:
    value: { get_attr: [config_deployment, status] }

  config_stderr:
    value: { get_attr: [config_deployment, deploy_stderr] }

  start_status:
    value: { get_attr: [start_deployment, status] }

  start_stderr:
    value: { get_attr: [start_deployment, deploy_stderr] }
